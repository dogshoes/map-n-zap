 /**********************************************************************
    Map-N-Zap v2.x. Interface to the CYE Personal Robot
    Copyright (C) 2000, Probotics, Inc. 
  
    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.
  
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.Furthermore, this source code
    is distributed without any promise, implied or explicit, of 
    support from Probotics, Inc.
  
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  
    02111-1307, USA.
  
    Probotics, Inc
    http://www.personalrobots.com
    700 River Ave #223
    Pittsburgh, PA 15212
    USA
  **********************************************************************/
  // Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++
  
  // NOTE: Do not modify the contents of this file.  If this class is regenerated by
  //  Microsoft Visual C++, your modifications will be overwritten.
  
  
  #include "stdafx.h"
  #include "canibuton.h"
  
  // Dispatch interfaces referenced by this interface
  #include "picture.h"
  #include "font.h"
  
  /////////////////////////////////////////////////////////////////////////////
  // CCanibuton
  
  IMPLEMENT_DYNCREATE(CCanibuton, CWnd)
  
  /////////////////////////////////////////////////////////////////////////////
  // CCanibuton properties
  
  short CCanibuton::GetValue()
  {
  	short result;
  	GetProperty(0x1, VT_I2, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetValue(short propVal)
  {
  	SetProperty(0x1, VT_I2, propVal);
  }
  
  short CCanibuton::Get_Value()
  {
  	short result;
  	GetProperty(0x0, VT_I2, (void*)&result);
  	return result;
  }
  
  void CCanibuton::Set_Value(short propVal)
  {
  	SetProperty(0x0, VT_I2, propVal);
  }
  
  CString CCanibuton::GetCCBfileSave()
  {
  	CString result;
  	GetProperty(0x2, VT_BSTR, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetCCBfileSave(LPCTSTR propVal)
  {
  	SetProperty(0x2, VT_BSTR, propVal);
  }
  
  BOOL CCanibuton::GetHideFocusBox()
  {
  	BOOL result;
  	GetProperty(0x3, VT_BOOL, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetHideFocusBox(BOOL propVal)
  {
  	SetProperty(0x3, VT_BOOL, propVal);
  }
  
  short CCanibuton::GetButtonVersion()
  {
  	short result;
  	GetProperty(0x4, VT_I2, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetButtonVersion(short propVal)
  {
  	SetProperty(0x4, VT_I2, propVal);
  }
  
  long CCanibuton::GetSpecialOp()
  {
  	long result;
  	GetProperty(0x5, VT_I4, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetSpecialOp(long propVal)
  {
  	SetProperty(0x5, VT_I4, propVal);
  }
  
  CString CCanibuton::GetFontName()
  {
  	CString result;
  	GetProperty(0x6, VT_BSTR, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetFontName(LPCTSTR propVal)
  {
  	SetProperty(0x6, VT_BSTR, propVal);
  }
  
  BOOL CCanibuton::GetFontBold()
  {
  	BOOL result;
  	GetProperty(0x7, VT_BOOL, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetFontBold(BOOL propVal)
  {
  	SetProperty(0x7, VT_BOOL, propVal);
  }
  
  BOOL CCanibuton::GetFontItalic()
  {
  	BOOL result;
  	GetProperty(0x8, VT_BOOL, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetFontItalic(BOOL propVal)
  {
  	SetProperty(0x8, VT_BOOL, propVal);
  }
  
  BOOL CCanibuton::GetFontStrikethru()
  {
  	BOOL result;
  	GetProperty(0x9, VT_BOOL, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetFontStrikethru(BOOL propVal)
  {
  	SetProperty(0x9, VT_BOOL, propVal);
  }
  
  BOOL CCanibuton::GetFontUnderline()
  {
  	BOOL result;
  	GetProperty(0xa, VT_BOOL, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetFontUnderline(BOOL propVal)
  {
  	SetProperty(0xa, VT_BOOL, propVal);
  }
  
  float CCanibuton::GetFontSize()
  {
  	float result;
  	GetProperty(0xb, VT_R4, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetFontSize(float propVal)
  {
  	SetProperty(0xb, VT_R4, propVal);
  }
  
  short CCanibuton::GetFrame()
  {
  	short result;
  	GetProperty(0xc, VT_I2, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetFrame(short propVal)
  {
  	SetProperty(0xc, VT_I2, propVal);
  }
  
  CPicture CCanibuton::GetPicture()
  {
  	LPDISPATCH pDispatch;
  	GetProperty(0xd, VT_DISPATCH, (void*)&pDispatch);
  	return CPicture(pDispatch);
  }
  
  void CCanibuton::SetPicture(LPDISPATCH propVal)
  {
  	SetProperty(0xd, VT_DISPATCH, propVal);
  }
  
  long CCanibuton::GetCycle()
  {
  	long result;
  	GetProperty(0xe, VT_I4, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetCycle(long propVal)
  {
  	SetProperty(0xe, VT_I4, propVal);
  }
  
  CPicture CCanibuton::GetMouseIcon()
  {
  	LPDISPATCH pDispatch;
  	GetProperty(0xf, VT_DISPATCH, (void*)&pDispatch);
  	return CPicture(pDispatch);
  }
  
  void CCanibuton::SetMouseIcon(LPDISPATCH propVal)
  {
  	SetProperty(0xf, VT_DISPATCH, propVal);
  }
  
  short CCanibuton::GetTextXpos()
  {
  	short result;
  	GetProperty(0x10, VT_I2, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetTextXpos(short propVal)
  {
  	SetProperty(0x10, VT_I2, propVal);
  }
  
  short CCanibuton::GetTextYpos()
  {
  	short result;
  	GetProperty(0x11, VT_I2, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetTextYpos(short propVal)
  {
  	SetProperty(0x11, VT_I2, propVal);
  }
  
  long CCanibuton::GetTextPosition()
  {
  	long result;
  	GetProperty(0x12, VT_I4, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetTextPosition(long propVal)
  {
  	SetProperty(0x12, VT_I4, propVal);
  }
  
  short CCanibuton::GetPictureXpos()
  {
  	short result;
  	GetProperty(0x13, VT_I2, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetPictureXpos(short propVal)
  {
  	SetProperty(0x13, VT_I2, propVal);
  }
  
  short CCanibuton::GetPictureYpos()
  {
  	short result;
  	GetProperty(0x14, VT_I2, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetPictureYpos(short propVal)
  {
  	SetProperty(0x14, VT_I2, propVal);
  }
  
  long CCanibuton::GetPictDrawMode()
  {
  	long result;
  	GetProperty(0x15, VT_I4, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetPictDrawMode(long propVal)
  {
  	SetProperty(0x15, VT_I4, propVal);
  }
  
  short CCanibuton::GetSpeed()
  {
  	short result;
  	GetProperty(0x16, VT_I2, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetSpeed(short propVal)
  {
  	SetProperty(0x16, VT_I2, propVal);
  }
  
  CString CCanibuton::GetCCBfileLoad()
  {
  	CString result;
  	GetProperty(0x17, VT_BSTR, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetCCBfileLoad(LPCTSTR propVal)
  {
  	SetProperty(0x17, VT_BSTR, propVal);
  }
  
  BOOL CCanibuton::GetClearFirst()
  {
  	BOOL result;
  	GetProperty(0x18, VT_BOOL, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetClearFirst(BOOL propVal)
  {
  	SetProperty(0x18, VT_BOOL, propVal);
  }
  
  long CCanibuton::GetMousePointer()
  {
  	long result;
  	GetProperty(0x19, VT_I4, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetMousePointer(long propVal)
  {
  	SetProperty(0x19, VT_I4, propVal);
  }
  
  long CCanibuton::GetClickFilter()
  {
  	long result;
  	GetProperty(0x1a, VT_I4, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetClickFilter(long propVal)
  {
  	SetProperty(0x1a, VT_I4, propVal);
  }
  
  OLE_COLOR CCanibuton::GetBackColor()
  {
  	OLE_COLOR result;
  	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetBackColor(OLE_COLOR propVal)
  {
  	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
  }
  
  OLE_COLOR CCanibuton::GetForeColor()
  {
  	OLE_COLOR result;
  	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetForeColor(OLE_COLOR propVal)
  {
  	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
  }
  
  BOOL CCanibuton::GetEnabled()
  {
  	BOOL result;
  	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetEnabled(BOOL propVal)
  {
  	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
  }
  
  CString CCanibuton::GetCaption()
  {
  	CString result;
  	GetProperty(DISPID_CAPTION, VT_BSTR, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetCaption(LPCTSTR propVal)
  {
  	SetProperty(DISPID_CAPTION, VT_BSTR, propVal);
  }
  
  COleFont CCanibuton::GetFont()
  {
  	LPDISPATCH pDispatch;
  	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
  	return COleFont(pDispatch);
  }
  
  void CCanibuton::SetFont(LPDISPATCH propVal)
  {
  	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
  }
  
  OLE_HANDLE CCanibuton::GetHWnd()
  {
  	OLE_HANDLE result;
  	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetHWnd(OLE_HANDLE propVal)
  {
  	SetProperty(DISPID_HWND, VT_I4, propVal);
  }
  
  short CCanibuton::GetBorderStyle()
  {
  	short result;
  	GetProperty(DISPID_BORDERSTYLE, VT_I4, (void*)&result);
  	return result;
  }
  
  void CCanibuton::SetBorderStyle(short propVal)
  {
  	SetProperty(DISPID_BORDERSTYLE, VT_I4, propVal);
  }
  
  /////////////////////////////////////////////////////////////////////////////
  // CCanibuton operations
  
  void CCanibuton::AboutBox()
  {
  	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
  }
  
  void CCanibuton::Refresh()
  {
  	InvokeHelper(DISPID_REFRESH, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
  }
