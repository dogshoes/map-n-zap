#if !defined(AFX_RRRCOM_H__05534181_C4B6_11D2_A5DD_00105A98F145__INCLUDED_)
#define AFX_RRRCOM_H__05534181_C4B6_11D2_A5DD_00105A98F145__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CRRRCom wrapper class

class CRRRCom : public CWnd
{
protected:
	DECLARE_DYNCREATE(CRRRCom)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x1bb9c513, 0x657f, 0x11d0, { 0x84, 0x65, 0xca, 0x28, 0x1d, 0x0, 0x0, 0x0 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	CString GetVersion();
	void SetVersion(LPCTSTR);
	long GetX();
	void SetX(long);
	long GetY();
	void SetY(long);
	long GetHeading();
	void SetHeading(long);
	short GetNumRobots();
	void SetNumRobots(short);
	float GetVelocity();
	void SetVelocity(float);
	float GetRadioLevel();
	void SetRadioLevel(float);
	float GetBatteryLevel();
	void SetBatteryLevel(float);
	long GetResponseTimeout();
	void SetResponseTimeout(long);
	long GetRetryLimit();
	void SetRetryLimit(long);
	short GetCommState();
	void SetCommState(short);

// Operations
public:
	void SetWheelVelocities(short RightWheel, short LeftWheel);
	void SetHeadingCorrectionFactor(short HeadingCorrectionFactor);
	void SetFlipHandle(long FlipHandle);
	void TurnTo(double Heading, short Speed);
	void StopMotors();
	void SetPWM(short RightPWM, short LeftPWM);
	void Stop();
	void Pause();
	void Resume();
	void SetBuzzerFrequency(short BuzzerFrequency);
	void SetBuzzerOn(long BuzzerOn);
	void FollowPath(short Speed);
	void SetHandleLength(short HandleLength);
	void SetMotorControlConstants(short Kp, short Ki, short Kd, short Kb, short Kpwm);
	void MoveCurve(double Heading, short Speed, short Diameter);
	void MoveStraight(short Speed, double Heading);
	void SetMaxSpeed(short MaxSpeed);
	void SendHeading(double Heading);
	void SendMotorVelocities(short M0Velocity, short M1Velocity, short Priority);
	void SetObstacleSensitivity(short Sensitivity);
	void MoveTo(double X, double Y, short Speed, short Priority);
	void SetPosition(long X, long Y);
	void LoadPathSegment(long PurgeOld, LPDISPATCH PathObject);
	void MoveDirection(short Speed, double Heading, short Priority);
	void RequestState();
	void PowerDown();
	void SendMessage(const VARIANT& MsgData);
	CString GetCommPort();
	void SetCommPort(LPCTSTR NewPort);
	void AboutBox();
};

/////////////////////////////////////////////////////////////////////////////
// IRRRPath wrapper class

class IRRRPath : public COleDispatchDriver
{
public:
	IRRRPath() {}		// Calls COleDispatchDriver default constructor
	IRRRPath(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRRRPath(const IRRRPath& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetNumPoints();
	void SetNumPoints(short);

// Operations
public:
	double GetX(short Index);
	void SetX(short Index, double newValue);
	double GetY(short Index);
	void SetY(short Index, double newValue);
};
//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_RRRCOM_H__05534181_C4B6_11D2_A5DD_00105A98F145__INCLUDED_)
