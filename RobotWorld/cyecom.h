/**********************************************************************
   Map-N-Zap v2.x. Interface to the CYE Personal Robot
   Copyright (C) 2000, Probotics, Inc.

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2
   of the License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.Furthermore, this source code
   is distributed without any promise, implied or explicit, of
   support from Probotics, Inc.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.

   Probotics, Inc
   http://www.personalrobots.com
   700 River Ave #223
   Pittsburgh, PA 15212
   USA
 **********************************************************************/
#if !defined(AFX_CYECOM_H__44FF69C2_8EC4_11D3_A5DF_00105A98F145__INCLUDED_)
#define AFX_CYECOM_H__44FF69C2_8EC4_11D3_A5DF_00105A98F145__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CCyeCom wrapper class

class CCyeCom : public CWnd
{
    protected:
        DECLARE_DYNCREATE(CCyeCom)
    public:
        CLSID const& GetClsid()
        {
            static CLSID const clsid
                = { 0x1bb9c513, 0x657f, 0x11d0, { 0x84, 0x65, 0xca, 0x28, 0x1d, 0x0, 0x0, 0x0 } };
            return clsid;
        }
        virtual BOOL Create(LPCTSTR lpszClassName,
                            LPCTSTR lpszWindowName, DWORD dwStyle,
                            const RECT& rect,
                            CWnd* pParentWnd, UINT nID,
                            CCreateContext* pContext = NULL)
        {
            return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID);
        }

        BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
                    const RECT& rect, CWnd* pParentWnd, UINT nID,
                    CFile* pPersist = NULL, BOOL bStorage = FALSE,
                    BSTR bstrLicKey = NULL)
        {
            return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
                                 pPersist, bStorage, bstrLicKey);
        }

        // Attributes
    public:
        CString GetVersion();
        void SetVersion(LPCTSTR);
        long GetX();
        void SetX(long);
        long GetY();
        void SetY(long);
        double GetHeading();
        void SetHeading(double);
        short GetRobotAddress();
        void SetRobotAddress(short);
        float GetRadioLevel();
        void SetRadioLevel(float);
        float GetBatteryLevel();
        void SetBatteryLevel(float);
        long GetResponseTimeout();
        void SetResponseTimeout(long);
        long GetRetryLimit();
        void SetRetryLimit(long);
        short GetCommState();
        void SetCommState(short);
        float GetRightCurrent();
        void SetRightCurrent(float);
        float GetLeftCurrent();
        void SetLeftCurrent(float);
        short GetLeftVelocity();
        void SetLeftVelocity(short);
        short GetRightVelocity();
        void SetRightVelocity(short);

        // Operations
    public:
        void SetHeadingCorrectionFactor(short HeadingCorrectionFactor);
        void SetFlipHandle(long FlipHandle);
        void TurnTo(double Heading, short Speed);
        void SetPWM(short RightPWM, short LeftPWM);
        void Stop();
        void Pause();
        void Resume();
        void SetBuzzerFrequency(short BuzzerFrequency);
        void SetBuzzerOn(long BuzzerOn);
        void FollowPath(short Speed);
        void SetHandleLength(short HandleLength);
        void SetMotorControlConstants(short Kp, short Ki, short Kd, short Kb, short Kpwm);
        void MoveCurve(double Heading, short Speed, short Diameter);
        void MoveStraight(short Speed, double Heading);
        void SetMaxSpeed(short MaxSpeed);
        void SetWheelVelocities(short RightVelocity, short LeftVelocity);
        void SetObstacleSensitivity(short Sensitivity);
        void MoveTo(double X, double Y, short Speed);
        void SetPosition(long X, long Y);
        void LoadPathSegment(long PurgeOld, LPDISPATCH PathObject);
        void MoveDirection(short Speed, double Heading);
        void RequestState();
        void PowerDown();
        void SendMessage(const VARIANT& MsgData);
        CString GetCommPort();
        void SetCommPort(LPCTSTR NewPort);
        void SquareToWall(double Heading, float TravelTime, long SlipperySurface);
        void SetFeelingMotor(short Motor);
        void CornerCalibrate(long X, long Y, double HO, short FeelWheel, float TravelTime, long SlipperySurface);
        void FindHomeBase(double CornerHeading, double WallHeading, long HomeBaseLocationX, long HomeBaseLocationY, long NeedToGetInFrontOfHomeBase);
        void SetHeadingDestination(double Heading, short Speed, short MotorEnable);
        void SetEnableObstacleBounce(long Enable);
        void SetRAMData(long Address, const VARIANT& Data);
        void SetRobotOnSeconds(long Seconds);
        void SetIntermittentBeep(long On);
        void AddToPosition(double DeltaX, double DeltaY);
        void AddToHeading(double Delta);
        void SetExternalOutput(long On);
        void RequestExternalInput();
        void AboutBox();
};

/////////////////////////////////////////////////////////////////////////////
// ICyePath wrapper class

class ICyePath : public COleDispatchDriver
{
    public:
        ICyePath() {}		// Calls COleDispatchDriver default constructor
        ICyePath(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
        ICyePath(const ICyePath& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

        // Attributes
    public:
        short GetNumPoints();
        void SetNumPoints(short);

        // Operations
    public:
        double GetX(short Index);
        void SetX(short Index, double newValue);
        double GetY(short Index);
        void SetY(short Index, double newValue);
};
//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_CYECOM_H__44FF69C2_8EC4_11D3_A5DF_00105A98F145__INCLUDED_)
